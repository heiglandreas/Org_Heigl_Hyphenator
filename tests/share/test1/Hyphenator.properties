;;
;; Copyright (c) 2008-2011 Andreas Heigl<andreas@heigl.org>
;;
;; Permission is hereby granted, free of charge, to any person obtaining a copy
;; of this software and associated documentation files (the "Software"), to deal
;; in the Software without restriction, including without limitation the rights
;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;; copies of the Software, and to permit persons to whom the Software is
;; furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included in
;; all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
;; THE SOFTWARE.
;;
;; @category  Hyphenation
;; @package   Org_Heigl_Hyphenator
;; @author    Andreas Heigl <andreas@heigl.org>
;; @copyright 2008-2011 Andreas Heigl<andreas@heigl.org>
;; @license   http://www.opensource.org/licenses/mit-license.php MIT-License
;; @version   2.0.1
;; @link      http://github.com/heiglandreas/Hyphenator
;; @since     07.11.2011
;;
;; This file contains the Configuration for the Hyphenator.
;;
;; NoHyphenateString
;;
;; This string can be prepend to a word to mark the word as not to be 
;; hyphenated. This can come in handy when the user has set some manual 
;; hyphenations that shall not be destroyed using an automated hyphenation
;;
noHyphenateString = null
;;
;; 
;; hyphen
;;
;; This string will be used as hyphen-character. This can be a soft-hyphen or
;; a hyphen-character. Usage might also depend on the used filters.
;; Note that the string given here has to be an UTF-8-String
;; The default is the soft-hyphen character
;;
hyphen = "-"
;;
;;
;; leftMin
;;
;; How many characters have to precede a hyphenation in a word.
;;
leftMin = 2
;;
;;
;; rightMin
;;
;; How many characters have to follow the  last hyphenation in a word.
;;
rightMin = 2
;;
;;
;; wordMin
;;
;; The length a word has to have at least to be hyphenated.
;; This lenth should be at least more than leftMin and rightMin together.
;;
wordMin = 6
;;
;;
;; quality
;;
;; What quality shall we use for finding hyphenations. The higher the number,
;; the better the automated hyphenation will be.
;; Only change this value when you know what you are doing!
;;
quality = 9
;;
;;
;; customHyphen
;;
;; Interpret this string as custom hyphen. If this string is found inside a 
;; word it will be replaced by the hyphen-String and no automated hyphenation
;; will take place.
;;
customHyphen = "=="
;;
;;
;; markCustomHyphenation
;;
;; Marking Custom Hyphenations will be taken care of by using a 
;; CustomMarkupFilter
;;
;;
;; defaultLocale
;;
;; This defines the default locale to use for hyphenations.
;;
defaultLocale = "de_DE"
;;
;;
;; tokenizers
;;
;; Which tokenizers to use for splitting a text into single words.
;; Separate multiple tokenizers with comma
;;
tokenizers = "Whitespace,Punctuation"
;;
;;
;; filters
;;
;; Which filters shall be used to postprocess the hyphenated strings.
;; Use a comma-separated list to specify multiple filters.
filters = "Simple,CustomMarkup"
